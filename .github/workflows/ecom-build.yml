name: Build automation for ecommerce poc

on:

  workflow_dispatch:

env:
  DJANGO_SECRET_KEY : ${{ secrets.DJANGO_SECRET_KEY }}
  STRIPE_PUBLIC_KEY : ${{ secrets.STRIPE_PUBLIC_KEY }}
  STRIPE_SECRET_KEY : ${{ secrets.STRIPE_SECRET_KEY }}
  DB_ENGINE : ${{ secrets.DB_ENGINE }}
  DB_HOST : ${{ secrets.DB_HOST }}
  DB_NAME : ${{ secrets.DB_NAME }}
  DB_PASS : ${{ secrets.DB_PASS }}
  DB_PORT : ${{ secrets.DB_PORT }}
  DB_USER : ${{ secrets.DB_USER }}
  AWS_ACCESS_KEY_ID : ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_LOCATION : ${{ secrets.AWS_LOCATION }}
  AWS_SECRET_ACCESS_KEY : ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_STORAGE_BUCKET_NAME : ${{ secrets.AWS_STORAGE_BUCKET_NAME }}

jobs:

  run-tests-and-build:

    environment: build
    
    runs-on: ubuntu-latest

    # we are unable to access environment secrets within the postgres
    # gh service below
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: 'postgres'
          POSTGRES_PASSWORD: 'fp12ww15'
          POSTGRES_DB: 'factory_pure_poc'
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: print the env (should be set for the entire job)
        run: env

      - name: set up python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: List files in the repository
        run: |
          ls ${{ github.workspace }}

      # we need to cache these dependencies
      - name: install dependencies
        run: |
          pip install -r requirements.txt

      - name: run migrations
        run: |
          cd ecommerce_poc
          python manage.py migrate

      - name: run model tests
        run: |
          cd ecommerce_poc
          python manage.py test
      # in order to test that our django app starts and works correctly
      # we should test all url paths in our app
      - name: test runserver
        run: |
          cd ecommerce_poc
          python manage.py runserver &